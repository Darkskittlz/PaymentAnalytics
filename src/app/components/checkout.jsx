'use client'

import { PaymentElement, useElements, useStripe } from '@stripe/react-stripe-js'
import React, { useEffect, useState } from 'react'
import convertToSubcurrency from '@/lib/convertToSubcurrency'

const CheckoutPage = ({ amount }) => {
  // Get the Stripe instance and the elements wrapper from the Stripe hook
  const stripe = useStripe();
  const elements = useElements();

  const [errorMessage, setErrorMessage] = useState();
  const [clientSecret, setClientSecret] = useState("");
  const [loading, setLoading] = useState(false);
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');


  // Fetch a payment intent from the stripe server when the component mounts or 'amount' changes
  // Payment Intent is an object created by the server to track the life cycle of a user payment. 

  // Example of Payment Intent created by the server:
  // const paymentIntent = await stripe.paymentIntents.create({
  //   amount: 1099, // Amount in subunits, e.g., cents
  //   currency: 'usd',
  //   payment_method_types: ['card'],
  // });

  useEffect(() => {
    fetch("/api/create-payment-intent", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      // Send the payment amount after converting it to cents
      body: JSON.stringify({
        amount: convertToSubcurrency(amount),
        username: username,
        email: email,
      }),
    })
      .then((res) => res.json()) // parse json response from stripe

      //Store the client secret in clientSecret state to show loading state and allow user to
      //pay only when they're verified by stripe with a unique secret
      .then((data) => setClientSecret(data.clientSecret));

  }, [amount]); // useEffect runs again when amount changes


  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    // Security check to ensure Stripe and Elements are loaded. Otherwise the ui will return a blank page.
    if (!stripe || !elements) {
      return;
    }


    // Validates input fields
    const { error: submitError } = await elements.submit();

    // If there's an error during submission then display the error and stop loading state
    if (submitError) {
      setErrorMessage(submitError.message);
      setLoading(false);
      return;
    }

    // Confirm payment with Stripe using the clientSecret and return URL
    // stripe.confirmPayment() is an asynchronous method provided by stripe to wait for a 
    // response from the stripe server before confirming payment.

    // clientSecret is a unique string generated by the stripe server. It is needed to confirm 
    // all payments in the client application. It also links the customers payment method with paymentIntent
    const { error } = await stripe.confirmPayment({
      elements,
      clientSecret,
      confirmParams: {
        return_url: `http://www.localhost:3000/payment-success?amount=${amount}`,
      },
    });

    if (error) {
      //This block will only be reached if there's an immediate error when confirming the payment. Showing error 
      // to customer if details are incomplete
      setErrorMessage(error.message);
    } else {
      // Payment UI automatically closes with a success animation. 
      // Customer is redirected to redirect url.
    }
    setLoading(false);
  }

  // Show loading state if clientSecret, Stripe, or Elements aren't ready yet.
  if (!clientSecret || !stripe || !elements) {
    return (
      <div className="flex items-center justify-center">
        <div
          className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-e-transparent align-[-0.125em] text-surface motion-reduce:animate-[spin_1.5s_linear_infinite] dark:text-white"
          role="status"
        >
          <span className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">
            Loading...
          </span>
        </div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className='bg-white p-2 rounded-md mt-8'>
      <div className='flex justify-start flex-wrap justify-center gap-4 py-4'>
        <input
          className="border-b-2 border-black w-1/3 text-black px-2"
          type="text"
          placeholder="Enter username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          className="border-b-2 border-black text-black mt-2 w-1/3 px-2"
          type="text"
          placeholder="Enter Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
      </div>
      {clientSecret && <PaymentElement />}
      <button
        disabled={!stripe || loading}
        className='text-white w-full p-5 bg-black mt-2 rounded-md font-bold disabled:opacity-50 disabled:animate-pulse'
      >
        {!loading ? `Pay $${amount}` : "Processing..."}
      </button>

    </form>
  )
}

export default CheckoutPage
